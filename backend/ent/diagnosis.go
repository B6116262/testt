// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/team06/app/ent/diagnosis"
)

// Diagnosis is the model entity for the Diagnosis schema.
type Diagnosis struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiagnosisQuery when eager-loading is set.
	Edges DiagnosisEdges `json:"edges"`
}

// DiagnosisEdges holds the relations/edges for other nodes in the graph.
type DiagnosisEdges struct {
	// Diagnosis holds the value of the diagnosis edge.
	Diagnosis []*Doctor
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DiagnosisOrErr returns the Diagnosis value or an error if the edge
// was not loaded in eager-loading.
func (e DiagnosisEdges) DiagnosisOrErr() ([]*Doctor, error) {
	if e.loadedTypes[0] {
		return e.Diagnosis, nil
	}
	return nil, &NotLoadedError{edge: "diagnosis"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Diagnosis) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case diagnosis.FieldID:
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Diagnosis", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Diagnosis fields.
func (d *Diagnosis) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case diagnosis.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		}
	}
	return nil
}

// QueryDiagnosis queries the "diagnosis" edge of the Diagnosis entity.
func (d *Diagnosis) QueryDiagnosis() *DoctorQuery {
	return (&DiagnosisClient{config: d.config}).QueryDiagnosis(d)
}

// Update returns a builder for updating this Diagnosis.
// Note that you need to call Diagnosis.Unwrap() before calling this method if this Diagnosis
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Diagnosis) Update() *DiagnosisUpdateOne {
	return (&DiagnosisClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Diagnosis entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Diagnosis) Unwrap() *Diagnosis {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Diagnosis is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Diagnosis) String() string {
	var builder strings.Builder
	builder.WriteString("Diagnosis(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Diagnoses is a parsable slice of Diagnosis.
type Diagnoses []*Diagnosis

func (d Diagnoses) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
