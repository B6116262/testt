// Code generated by entc, DO NOT EDIT.

package proceduretype

const (
	// Label holds the string label denoting the proceduretype type in the database.
	Label = "procedure_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProcedureType holds the string denoting the proceduretype field in the database.
	FieldProcedureType = "procedure_type"

	// EdgeProcedureToMedicalProcedure holds the string denoting the proceduretomedicalprocedure edge name in mutations.
	EdgeProcedureToMedicalProcedure = "ProcedureToMedicalProcedure"

	// Table holds the table name of the proceduretype in the database.
	Table = "procedure_types"
	// ProcedureToMedicalProcedureTable is the table the holds the ProcedureToMedicalProcedure relation/edge.
	ProcedureToMedicalProcedureTable = "medical_procedures"
	// ProcedureToMedicalProcedureInverseTable is the table name for the MedicalProcedure entity.
	// It exists in this package in order to avoid circular dependency with the "medicalprocedure" package.
	ProcedureToMedicalProcedureInverseTable = "medical_procedures"
	// ProcedureToMedicalProcedureColumn is the table column denoting the ProcedureToMedicalProcedure relation/edge.
	ProcedureToMedicalProcedureColumn = "procedure_type_procedure_to_medical_procedure"
)

// Columns holds all SQL columns for proceduretype fields.
var Columns = []string{
	FieldID,
	FieldProcedureType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
